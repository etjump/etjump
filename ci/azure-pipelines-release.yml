# ETJump Release Pipeline II
# Builds native Windows, Linux and macOS binaries

trigger:
- master
pr: none

variables:
  buildDir: build

jobs:

- job: build_linux

  pool:
    vmImage: 'ubuntu-16.04'

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install gcc-multilib g++-multilib
    displayName: 'Install linux deps'

  - script: |
      mkdir $(buildDir) && cd $(buildDir)
      cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF
      cmake --build . --parallel
    displayName: 'Build linux x86_64'

  - script: |
      cd $(buildDir) && rm CMakeCache.txt
      cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-cross-x86-linux.cmake
      cmake --build . --parallel
    displayName: 'Build linux x86'

  - task: CopyFiles@2
    inputs:
      contents: '*.so'
      sourceFolder: '$(buildDir)/etjump'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy binaries'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: etjump
    displayName: 'Publish binaries'

- job: build_windows

  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - script: |
      mkdir $(buildDir)
      cd $(buildDir)
      cmake .. -A x64 -DBUILD_TESTS=OFF
      cmake --build . --config Release --parallel
    displayName: 'Build windows x86_64'

  - script: |
      cd $(buildDir)
      del /f CMakeCache.txt
      cmake .. -A Win32 -DBUILD_TESTS=OFF
      cmake --build . --config Release --parallel
    displayName: 'Build windows x86'
  - task: CopyFiles@2
    inputs:
      contents: '*.dll'
      sourceFolder: '$(buildDir)/etjump'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy binaries'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: etjump
    displayName: 'Publish binaries'

- job: build_macos

  pool:
    vmImage: 'macOS-10.15'

  steps:

  - script: |
      mkdir $(buildDir) && cd $(buildDir)
      cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DCMAKE_OSX_DEPLOYMENT_TARGET="10.10"
      cmake --build . --parallel
    displayName: 'Build macOS x86_64'
  - task: CopyFiles@2
    inputs:
      contents: '*_mac'
      sourceFolder: '$(buildDir)/etjump'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy binaries'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: etjump
    displayName: 'Publish binaries'
    
- job: pack_files
  dependsOn: 
  - build_linux
  - build_windows
  - build_macos

  pool:
    vmImage: 'ubuntu-16.04'

  steps:

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'etjump'
      downloadPath: '$(System.DefaultWorkingDirectory)/$(buildDir)'
    displayName: 'Fetch binaries'

  - script: |
      cd $(buildDir)
      cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF
      make mod_release
    displayName: 'Pack release zip'

  - task: CopyFiles@2
    displayName: 'Copy artifact'
    inputs:
      contents: '*.zip'
      sourceFolder: $(buildDir)
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact'
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: etjump
