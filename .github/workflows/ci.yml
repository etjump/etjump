name: etjump-CI

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  merge_group:

jobs:
  Windows:
    name: Windows ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x64]
        config: [Release]
        include:
          - arch: x86
            platform: Win32

          - arch: x64
            platform: x64
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.config }} -G "Visual Studio 16 2019" -A ${{ matrix.platform }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.config }} --parallel

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{ matrix.config }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: etjump-artifacts-win-${{ matrix.arch }}
        path: ${{ github.workspace }}/build/etjump

  Linux:
    name: Linux ${{ matrix.arch }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        config: [Release]

    steps:
    - name: Install dependencies
      if: matrix.arch == 'x86'
      run: |
        sudo apt-get update
        sudo apt-get install gcc-multilib g++-multilib    

    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Configure CMake
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-cross-x86-linux.cmake
        else
          cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        fi

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.config }} --parallel

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{ matrix.config }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: etjump-artifacts-linux-${{ matrix.arch }}
        path: ${{ github.workspace }}/build/etjump

  macOS:
    name: macOS ${{ matrix.arch }}
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        config: [Release]
        include:
          - arch: x64
            platforms: "\"x86_64;arm64\""
            osx-target: "10.10"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_OSX_ARCHITECTURES=${{ matrix.platforms }} -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.osx-target }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.config }} --parallel

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ matrix.config }}  

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: etjump-artifacts-macos-${{ matrix.arch }}
        path: ${{ github.workspace }}/build/etjump

  package:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-20.04
    needs: [Windows, Linux, macOS]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        pattern: etjump-artifacts-*
        merge-multiple: true
        path: ${{ github.workspace }}/build/etjump

    - name: Pack release zip
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF
        make mod_release

    - name: Upload release 
      uses: actions/upload-artifact@v4
      with:
        name: etjump-snapshot-release
        path: ${{ github.workspace }}/build/*.zip

    - name: Create latest build
      uses: czietz/action-automatic-releases@latest
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        automatic_release_tag: "latest"
        prerelease: false
        title: Latest Build
        files: ${{ github.workspace }}/build/*.zip
