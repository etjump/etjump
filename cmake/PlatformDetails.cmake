if (APPLE)
	# Must specify a macOS target, otherwise it will require the OS version used at compile time.
	if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)
		set(CMAKE_OSX_DEPLOYMENT_TARGET "10.14")
	endif()
endif()

function(get_platform_suffix var_name)
	if(WIN32)
		set(LIB_SUFFIX "_mp_")
	elseif(APPLE)
		set(LIB_SUFFIX "_mac")
	elseif(UNIX)
		set(LIB_SUFFIX ".mp.")
	else()
		message(FATAL_ERROR "unsupported system ${CMAKE_SYSTEM_NAME}")
	endif()

	# generator specified architecture
	if(MSVC AND CMAKE_GENERATOR_PLATFORM)
		if("${CMAKE_GENERATOR_PLATFORM}" MATCHES "(Win32|win32)$")
			set(CMAKE_SYSTEM_PROCESSOR X86)
		else()
			set(CMAKE_SYSTEM_PROCESSOR AMD64)
		endif()
	endif()

	if(MSVC AND SYSTEM_PROCESSOR)
		if("${SYSTEM_PROCESSOR}" MATCHES "x86")
			set(CMAKE_SYSTEM_PROCESSOR X86)
		else()
			set(CMAKE_SYSTEM_PROCESSOR AMD64)
		endif()
	endif()

	if("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(x86|X86|i686|i386)$")
		if(WIN32)
			set(LIB_ARCH "x86")
		elseif(UNIX AND NOT APPLE)
			set(LIB_ARCH "i386")
		endif()
	elseif("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(amd64|AMD64|x86_64|arm64)$")
		if(WIN32)
			set(LIB_ARCH "x64")
		elseif(UNIX AND NOT APPLE)
			set(LIB_ARCH "x86_64")
		endif()
	else()
		message(FATAL_ERROR "unsupported architecture ${CMAKE_SYSTEM_PROCESSOR}")
	endif()

	set(${var_name} "${LIB_SUFFIX}${LIB_ARCH}" PARENT_SCOPE)
endfunction()

function(set_target_platform_details target)
	get_platform_suffix(PLATFORM_SUFFIX)
	set_target_properties(${target} PROPERTIES OUTPUT_NAME "${target}${PLATFORM_SUFFIX}" PREFIX "")
	target_compile_definitions(${target} PRIVATE GAME_BINARY_NAME="${target}${PLATFORM_SUFFIX}")
	if (APPLE)
		set_target_properties(${target} PROPERTIES SUFFIX "")
	endif()
endfunction()
